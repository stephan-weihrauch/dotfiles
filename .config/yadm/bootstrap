#!/bin/sh
system_type=$(uname -s)

#######################################################################
#                            general stuff                            #
#######################################################################

mkdir ${home}/tmp

if [ "$system_type" = "Linux" ]; then
  # TODO: Add some stuff for Linux!
  echo "# TODO: Add some stuff for Linux!"
fi

if [ "$system_type" = "Darwin" ]; then

  # install homebrew if it's missing
  if ! command -v brew >/dev/null 2>&1; then
    echo "Installing homebrew"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
  else
    echo "Homebrew is already installed ..."
  fi

  # install oh-my-zsh if it's missing
  if ! ls ${HOME}/.oh-my-zsh >/dev/null 2>&1; then
    echo "Installing Oh-My-ZSH ..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
  else
    echo "Oh-My-ZSH is already installed ..."
  fi

  if [ -f "$HOME/.Brewfile" ]; then
    echo "Updating homebrew bundle"
    brew bundle --global
  fi

  # Create cronjob
  if [ $(crontab -l | grep brew | wc -l) -eq 0 ]; then
    (
      crontab -l
      echo "0 */3 * * * brew bundle dump --force --file ~/.Brewfile"
    ) | crontab -
  fi

#-----------------------------------------
# * Configure iTerm2 (to use ~/.iterm2/)
#   https://yadm.io/docs/bootstrap
#-----------------------------------------

if [ "$SYSTEM_TYPE" = "Darwin" ]; then

  if [ -d "$HOME/.iterm2" ]; then
    echo ">>> Setting iTerm prefs directory.."
    defaults write com.googlecode.iterm2 PrefsCustomFolder "$HOME/.iterm2"
    defaults write com.googlecode.iterm2 LoadPrefsFromCustomFolder -bool true
  fi

fi

#-----------------------------------------
# * Configure Visual Studio Code
#   (settings.json, keybindings.json, snippets/)
# * Intall Extensions
#-----------------------------------------

if [ "$SYSTEM_TYPE" = "Darwin" ]; then

    echo ">>> Setting Visual Studio Code user configs.."
    VSCODE_USERDIR="$HOME/Library/Application Support/Code/User"
    ln -sf $HOME/.vscode-conf/settings.json    "$VSCODE_USERDIR/settings.json"
    ln -sf $HOME/.vscode-conf/keybindings.json "$VSCODE_USERDIR/keybindings.json"
    ln -sf $HOME/.vscode-conf/snippets/        "$VSCODE_USERDIR/snippets"

fi

# Install extensions
echo ">>> Installing Visual Studio Code extensions.."
for ext in $(cat $HOME/.vscode-conf/vscode-extensions.txt); do
  code --install-extension "$ext"
done

#-----------------------------------------
# * Set yadm origin url to ssh
#-----------------------------------------

echo ">>> Updating the yadm origin to ssh.."
yadm remote set-url origin "$SSH_REPO_URL"

echo "Done!"

  ###############################################################################
  # Global Config                                                               #
  ###############################################################################

  # Ask for the administrator password upfront
  sudo -v

  # Close any open System Preferences panes, to prevent them from overriding
  # settings weâ€™re about to change
  osascript -e 'tell application "System Preferences" to quit'

  ###############################################################################
  # General Settings                                                            #
  ###############################################################################
  echo "Apply General Settings"
  # Set Avatar Image
  sudo dscl . -delete /Users/$USER JPEGPhoto
  sudo dscl . -delete /Users/$USER Picture
  sudo dscl . -create /Users/$USER Picture "$HOME/.dotfileassets/me.jpg"

  # Require password immediately after sleep or screen saver begins
  defaults write com.apple.screensaver askForPassword -int 1
  defaults write com.apple.screensaver askForPasswordDelay -int 0

  # Show battery as percentage
  defaults write com.apple.menuextra.battery ShowPercent -string "YES"

  # Trackpad: map bottom right corner to right-click
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadCornerSecondaryClick -int 2
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool true
  defaults write com.apple.AppleMultitouchTrackpad TrackpadCornerSecondaryClick -int 2
  defaults write com.apple.AppleMultitouchTrackpad TrackpadRightClick -bool true
  defaults -currentHost write NSGlobalDomain com.apple.trackpad.trackpadCornerClickBehavior -int 1
  defaults -currentHost write NSGlobalDomain com.apple.trackpad.enableSecondaryClick -bool true

  # Set misson controlle on the upper right corner
  defaults write com.apple.dock wvous-tr-corner -int 2

  # Trackpad/Mouse: Fix the scrolling or disable natural scrolling ;)
  defaults write com.apple.swipescrolldirection -int 1

   ## set hostname
  sudo scutil --set ComputerName "AMAC02G29GRMD6M"
  sudo scutil --set HostName "AMAC02G29GRMD6M"
  sudo scutil --set LocalHostName "AMAC02G29GRMD6M"
  sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "AMAC02G29GRMD6M"

  # Save screen shots to other location
  mkdir -p "${HOME}/Desktop/Desktop"
  defaults write com.apple.screencapture location -string "${HOME}/Desktop/Desktop"

  # Prevent Photos from opening automatically when devices are plugged in
  defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool true

   # Show date on the menu bar
  ## Ref: https://www.tech-otaku.com/mac/setting-the-date-and-time-format-for-the-macos-menu-bar-clock-using-terminal/
  ## Thu 18 Aug 23:46:18 	-> EEE d MMM HH:mm:ss
  ## Thu 18 Aug 11:46:18 pm	-> EEE d MMM h:mm:ss a
  defaults write com.apple.menuextra.clock DateFormat -string "EEE d MMM HH:mm"

    ###############################################################################
  # ShortCut Settings                                                           #
  ###############################################################################
  echo "OSX ShortCut Settings"

  # Hot corners
  # Possible values:
  #  0: no-op
  #  2: Mission Control
  #  3: Show application windows
  #  4: Desktop
  #  5: Start screen saver
  #  6: Disable screen saver
  #  7: Dashboard
  # 10: Put display to sleep
  # 11: Launchpad
  # 12: Notification Center
  # 13: Lock Screen

  # Top left screen corner
  defaults write com.apple.dock wvous-tl-corner -int 0
  defaults write com.apple.dock wvous-tl-modifier -int 0

  # Bottom left screen corner
  defaults write com.apple.dock wvous-bl-corner -int 0
  defaults write com.apple.dock wvous-bl-modifier -int 0

  # Top right screen corner
  defaults write com.apple.dock wvous-tr-corner -int 3
  defaults write com.apple.dock wvous-tr-modifier -int 0

  # Bottom right screen corner
  defaults write com.apple.dock wvous-br-corner -int 0
  defaults write com.apple.dock wvous-br-modifier -int 0

  ###############################################################################
  # Finder Settings                                                             #
  ###############################################################################
  echo "Finder Settings"
  # disable siri icon
  defaults write com.apple.systemuiserver "NSStatusItem Visible Siri" -bool false

  # dont show any icon on the desktop
  defaults write com.apple.finder CreateDesktop false

  # automatically hide and show the Dock
  defaults write com.apple.dock autohide -bool true

  # Remove the auto-hiding Dock delay
  defaults write com.apple.dock autohide-delay -float 0

  # disable user switcher
  defaults write com.apple.menuextra.appleuser -int 0

  ###############################################################################
  # Kill affected applications                                                  #
  ###############################################################################
  for app in "Activity Monitor" \
    "Address Book" \
    "Calendar" \
    "Contacts" \
    "Dock" \
    "Finder" \
    "Google Chrome" \
    "SystemUIServer" \
    "iCal"; do
    killall "${app}" &>/dev/null
  done

fi
